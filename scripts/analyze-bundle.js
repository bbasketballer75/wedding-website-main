const fs = require('fs');
const path = require('path');

// Analyze the bundle report generated by webpack-bundle-analyzer
function analyzeBundleSize() {
  console.log('üìä Bundle Size Analysis for Wedding Website\n');

  const nextDir = path.join(process.cwd(), '.next');

  if (!fs.existsSync(nextDir)) {
    console.log('‚ùå No .next directory found. Please run "npm run build" first.');
    return;
  } // Check static chunks
  const staticDir = path.join(nextDir, 'static', 'chunks');

  if (fs.existsSync(staticDir)) {
    const chunks = fs
      .readdirSync(staticDir)
      .filter((file) => file.endsWith('.js'))
      .map((file) => {
        const filePath = path.join(staticDir, file);
        const stats = fs.statSync(filePath);
        return {
          name: file,
          size: stats.size,
          sizeKB: Math.round(stats.size / 1024),
        };
      })
      .sort((a, b) => b.size - a.size);

    console.log('üöÄ Largest JavaScript Chunks:');
    console.log('‚ïê'.repeat(50));

    chunks.slice(0, 10).forEach((chunk, index) => {
      const percentage = ((chunk.size / chunks.reduce((sum, c) => sum + c.size, 0)) * 100).toFixed(
        1
      );
      console.log(`${index + 1}. ${chunk.name}`);
      console.log(`   Size: ${chunk.sizeKB} KB (${percentage}%)`);
      console.log('');
    });

    const totalSize = chunks.reduce((sum, chunk) => sum + chunk.size, 0);
    console.log(`üìà Total Bundle Size: ${Math.round(totalSize / 1024)} KB`);
    console.log('');

    // Recommendations based on size
    const largeChunks = chunks.filter((chunk) => chunk.sizeKB > 100);
    if (largeChunks.length > 0) {
      console.log('‚ö†Ô∏è  Large Chunks Detected (>100KB):');
      largeChunks.forEach((chunk) => {
        console.log(`   ‚Ä¢ ${chunk.name} (${chunk.sizeKB} KB)`);
      });
      console.log('');
      console.log('üí° Optimization Recommendations:');
      console.log('   ‚Ä¢ Consider code splitting for large vendor chunks');
      console.log('   ‚Ä¢ Use dynamic imports for non-critical components');
      console.log('   ‚Ä¢ Tree-shake unused dependencies');
      console.log('   ‚Ä¢ Consider replacing large libraries with lighter alternatives');
    }
  }

  // Check build output for more details
  console.log('\nüîç Build Output Analysis:');
  console.log('   Run "npm run build" to see detailed page sizes');
  console.log('   Run "npm run build:analyze" to open interactive bundle analyzer');
}

if (require.main === module) {
  analyzeBundleSize();
}

module.exports = { analyzeBundleSize };
