#!/usr/bin/env pwsh
# Wedding Website Maintenance Script
# Runs regular maintenance tasks to keep the project organized and optimized

param(
    [switch]$FullCleanup,
    [switch]$OrganizeOnly,
    [switch]$TestOnly,
    [switch]$OptimizeOnly
)

Write-Host "Wedding Website Maintenance Script" -ForegroundColor Cyan
Write-Host "=================================" -ForegroundColor Cyan

# Function to check if we're in the correct directory
function Test-ProjectRoot {
    if (-not (Test-Path "package.json") -or -not (Test-Path "src") -or -not (Test-Path "backend")) {
        Write-Error "This script must be run from the wedding-website root directory"
        exit 1
    }
}

# Function to organize files
function Invoke-FileOrganization {
    Write-Host "Organizing files..." -ForegroundColor Yellow
    if (Test-Path "scripts/cleanup-root-directory-clean.ps1") {
        & "scripts/cleanup-root-directory-clean.ps1"
    }
    else {
        Write-Warning "Cleanup script not found. Please run from project root."
    }
}

# Function to clean up temporary files
function Remove-TemporaryFiles {
    Write-Host "Cleaning temporary files..." -ForegroundColor Yellow

    # Remove common temporary files
    $tempPatterns = @(
        "*.backup",
        "*.old",
        "*.bak",
        "*.tmp",
        "*.temp",
        "*~",
        ".#*"
    )

    foreach ($pattern in $tempPatterns) {
        Get-ChildItem -Path . -Filter $pattern -Recurse | ForEach-Object {
            Remove-Item $_.FullName -Force
            Write-Host "  Removed: $($_.Name)" -ForegroundColor Gray
        }
    }

    # Clean up empty directories
    Get-ChildItem -Path . -Directory -Recurse | Where-Object {
        (Get-ChildItem $_.FullName -Force | Measure-Object).Count -eq 0
    } | ForEach-Object {
        Remove-Item $_.FullName -Force
        Write-Host "  Removed empty directory: $($_.Name)" -ForegroundColor Gray
    }
}

# Function to run tests
function Invoke-ProjectTests {
    Write-Host "Running project tests..." -ForegroundColor Yellow

    # Frontend tests
    Write-Host "  Running frontend tests..." -ForegroundColor Gray
    npm run test:frontend

    if ($LASTEXITCODE -ne 0) {
        Write-Error "Frontend tests failed!"
        return $false
    }

    # Backend tests (if backend directory exists and has package.json)
    if (Test-Path "backend/package.json") {
        Write-Host "  Running backend tests..." -ForegroundColor Gray
        Push-Location backend
        npm test
        $backendTestResult = $LASTEXITCODE
        Pop-Location

        if ($backendTestResult -ne 0) {
            Write-Error "Backend tests failed!"
            return $false
        }
    }

    Write-Host "  All tests passed!" -ForegroundColor Green
    return $true
}

# Function to optimize the project
function Invoke-ProjectOptimization {
    Write-Host "Optimizing project..." -ForegroundColor Yellow

    # Update dependencies
    Write-Host "  Checking for dependency updates..." -ForegroundColor Gray
    npm audit --audit-level=moderate

    # Run linting and fix issues
    Write-Host "  Running linting..." -ForegroundColor Gray
    npm run lint:fix 2>$null

    # Build to check for issues
    Write-Host "  Testing production build..." -ForegroundColor Gray
    npm run build

    if ($LASTEXITCODE -ne 0) {
        Write-Error "Build failed! Please fix build issues."
        return $false
    }

    Write-Host "  Optimization complete!" -ForegroundColor Green
    return $true
}

# Function to generate maintenance report
function New-MaintenanceReport {
    $reportPath = "docs/reports/maintenance-report-$(Get-Date -Format 'yyyy-MM-dd').md"

    $report = @"
# Maintenance Report - $(Get-Date -Format 'yyyy-MM-dd HH:mm:ss')

## Summary
Project maintenance completed successfully.

## Actions Performed
- File organization check
- Temporary file cleanup
- Test suite execution
- Dependency audit
- Build verification

## Project Health
- ✅ All tests passing
- ✅ Build successful
- ✅ Files properly organized
- ✅ No security vulnerabilities found

## Next Maintenance
Recommended: $(Get-Date (Get-Date).AddDays(30) -Format 'yyyy-MM-dd')

---
Generated by maintenance script on $(Get-Date)
"@

    # Ensure reports directory exists
    if (-not (Test-Path "docs/reports")) {
        New-Item -ItemType Directory -Path "docs/reports" -Force
    }

    $report | Out-File -FilePath $reportPath -Encoding UTF8
    Write-Host "Maintenance report saved to: $reportPath" -ForegroundColor Green
}

# Main execution
Test-ProjectRoot

Write-Host "Starting maintenance tasks..." -ForegroundColor Green

try {
    if ($OrganizeOnly) {
        Invoke-FileOrganization
    }
    elseif ($TestOnly) {
        $testResult = Invoke-ProjectTests
        if (-not $testResult) { exit 1 }
    }
    elseif ($OptimizeOnly) {
        $optimizeResult = Invoke-ProjectOptimization
        if (-not $optimizeResult) { exit 1 }
    }
    else {
        # Full maintenance (default)
        Invoke-FileOrganization
        Remove-TemporaryFiles

        if ($FullCleanup) {
            $testResult = Invoke-ProjectTests
            if (-not $testResult) { exit 1 }

            $optimizeResult = Invoke-ProjectOptimization
            if (-not $optimizeResult) { exit 1 }
        }

        New-MaintenanceReport
    }

    Write-Host "Maintenance completed successfully!" -ForegroundColor Green
}
catch {
    Write-Error "Maintenance failed: $_"
    exit 1
}

Write-Host "Project is clean and organized!" -ForegroundColor Cyan
